
#+STARTUP: showall

#+TAGS: TOC(t)

* Table of contents                                                     :TOC_2_gh:
- [[#introduction][Introduction]]
  - [[#history][History]]
  - [[#goal][Goal]]
- [[#step-by-step][Step by Step]]
  - [[#first-circles][First circles]]
  - [[#moving-around][Moving around]]
  - [[#splits][Splits]]
- [[#key-bindings][Key Bindings]]
  - [[#levels][Levels]]
  - [[#list-of-bindings][List of bindings]]
  - [[#shortcuts][Shortcuts]]
- [[#configuration][Configuration]]
- [[#warning][Warning]]

* Introduction

If you ever dreamed about creating and switching buffer groups at will
in emacs, [[https://github.com/chimay/torus][Torus]] is the tool you want.

In short, this plugin let you organize your buffers by creating as
many buffer groups as you need, add the buffers you want to it and
quickly navigate between :

  - Buffers of the same group

  - Buffer groups (circles)

Note that :

  - A location is a pair (filename . position)

  - A buffer group, in fact a location group, is called a circle

  - The set of all buffer groups is called the torus (a circle of circles)


** History

This project is inspired by MTorus. You can find the original sources
on the links below :

  - The repository of Stefan Kamphausen, the orignal author, is
    available at https://www.skamphausen.de/cgi-bin/ska/mtorus

  - The rewrite by Sebastian Freundt is available on
    https://sourceforge.net/projects/mtorus.berlios/

  - I’ve a personal fork of the second one :
    https://github.com/chimay/mtorus, but I won’t maintain it anymore

The code I forked is complex, so I decided to write a new version from
scratch, easier to maintain and enjoying more recent features of
emacs.


** Goal

Torus helps you to organize your files in groups that you create
yourself, following your workflow. You only add the files you want,
where you want. For instance, if you have a "organize" group with
agenda & todo files, you can quickly alternate them, or display them
in two windows. Then, if you suddenly got an idea to tune emacs, you
switch to the "emacs" group with your favorites configuration files in
it. Same process, to cycle, alternate or display the files. Note that
the torus containing all these groups can be saved on a file and
loaded later. Over time, your groups will grow and adapt to your
style.


* Step by Step


** First circles

Let’s say we have the files =Juice=, =Tea=, =Coffe=. The first thing
to do is to create a group (a circle) which will contain them. So, we
launch ~torus-add-circle~ and answer =Drinks= to the prompt. Then, we
go to =Juice= and use ~torus-add-location~ to add it to the circle.
Same process with =Tea= and =Coffee=. We now have a circle =Drink=
containing three files.

If you want to create another circle, let’s say =Fruits=, simply
launch ~torus-add-circle~ again, and enter another name. You can then
add the files =Apple=, =Pear= and =Orange= to it. You can even also
add =Juice=, a file can be added to more than one circle.

Now, suppose that in the =Juice= file, you have a Pineapple and a
Mango sections, and you want to compare them. Just go to the Pineapple
section, use ~torus-add-location~. It will add the location
(=Juice . pineapple-position=) to the current circle. Then, go to
the Mango section, and do the same. The (=Juice . mango-position=)
will also be added to the circle. You can then easily alternate both,
or display them in split windows.


** Moving around

You can cycle the files of a circle with ~torus-next-location~ and
~torus-previous-location~. You can also switch file with completion by using
~torus-switch-location~. It works well with Helm.

To cycle the circles, use ~torus-next-circle~ and
~torus-previous-circle~. The switch function is ~torus-switch-circle~.


** Splits

If you prefix a torus navigation function by C-u, the asked file will
be opened in a new window below. With C-u C-u, it will be in a new
window on the right.

If you want to see all the circle files in separate windows, use
~torus-split-horizontally~ or ~torus-split-vertically~. The maximum
number of splits generated by these two functions are controlled by
the vars ~torus-maximum-horizontal-split~ and
~torus-maximum-vertical-split~.


* Key Bindings

All bindings are available after the prefix key =<super-t>= by
default. You can see them by pressing <super-t><C-h>, or by installing
[[https://github.com/justbur/emacs-which-key][which-key]]. You can also define your own :

#+begin_src emacs-lisp
  (define-key torus-map (kbd "i") 'torus-info)
#+end_src


** Levels

The option ~torus-binding-level~ decide how many functions will be
bound to keys :

  - Level 0

    + Adding

    + Deleting

    + Moving around

    + Save and load

  - Level 1

    + History

    + Renaming

    + Moving and copying things

    + Joining

  - Level 2

    + Reverse

    + Prefix

    + Regroup

    + Save and load ~torus-meta~

    + Print main variables

  - Level 3 : you surely don’t want to use these

Level 1 or 2 is fine for most usages.


** List of bindings

Enter the prefix key, then

  - =c= : create a new circle, add it to the torus

  - =l= : create a new location (file . position)

  - =i= : info about the current circle

  - =p= : print main variables content

  - =<down>= : next file (location) in circle

  - =<up>= : previous file in circle

  - ~=~ : switch file in circle

  - =<right>= : next circle

  - =<left>= : previous circle

  - =<space>= : switch circle

  - =s= : search file in all circles

  - =<PageDown>= : older file in file history

  - =<PageUp>= : newer file in file history

  - =^= : alternate last two visited files in history

  - =<= : alternate last two circles in history

  - =>= : alternate last two files in same circle in history

  - =h= : search in the file history

  - =n= : rename circle

  - =d= : delete file from circle

  - =D= : delete circle from torus

  - =w= : write torus to a file as Lisp code (with ".el" extension)

  - =r= : read torus from a torus file

  - =m= : move file in circle (not on disk)

  - =M= : move circle in torus

  - =C-m= : move file to another circle

  - =M-m= : move all files of the circle to another circle

  - =y= : copy, add the (file . position) to another circle

  - =j= : join the files of two circles, a new circle is created to
    contain them

  - =! l= : reverse location order (file order) in a circle

  - =! c= : reverse circle order in the torus

  - =! d= : deep reverse : reverse both locations and circles

  - =_= : split horizontally to display all files of the circles

  - =|= : split vertically to display all files of the circles

  - =#= : split in a grid to display all files of the circles


*** Torus operations

It is possible to load more than one torus file : a list of loaded
toruses is available.

  - =+= : add a new torus to the torus list (variable ~torus-meta~)

  - =@= : switch torus

  - =N= : rename torus

  - =J= : join the circles of two toruses, a new torus is created to
    contain them

  - =-= : delete a torus

  - =g d= : regroup files by directories in a new torus

  - =g e= : regroup files by extensions in a new torus

  - =W= : save ~torus-meta~ to a file (with ".meta.el" extension)

  - =R= : load ~torus-meta~ from a file


** Shortcuts

I strongly suggest that you bind the functions you use most to quick
shortcuts. Here are some examples :

#+begin_src emacs-lisp

  (global-set-key (kbd "<S-s-insert>") 'torus-add-circle)
  (global-set-key (kbd "<s-insert>") 'torus-add-location)

  (global-set-key (kbd "<s-delete>") 'torus-delete-location)
  (global-set-key (kbd "<S-s-delete>") 'torus-delete-circle)

  (global-set-key (kbd "<C-prior>") 'torus-previous-location)
  (global-set-key (kbd "<C-next>") 'torus-next-location)

  (global-set-key (kbd "<C-home>") 'torus-previous-circle)
  (global-set-key (kbd "<C-end>") 'torus-next-circle)

  (global-set-key (kbd "<S-prior>") 'torus-previous-history)
  (global-set-key (kbd "<S-next>") 'torus-next-history)

  (global-set-key (kbd "s-SPC") 'torus-switch-circle)
  (global-set-key (kbd "s-=") 'torus-switch-location)
  (global-set-key (kbd "s-^") 'torus-switch-torus)

  (global-set-key (kbd "s-/") 'torus-search)

  (global-set-key (kbd "C-^") 'torus-alternate)

#+end_src


* Configuration

Here is a sample configuration :

#+begin_src emacs-lisp

  (require 'torus)

  (setq torus-prefix-key "s-t")

  ;; Range 0 -> 3
  ;; The bigger it is, the more bindings.
  (setq torus-binding-level 1)

  ;; Created if non existent
  (setq torus-dirname "~/.emacs.d/torus/")

  ;; Set it to t if you want autoload of torus on Emacs startup
  (setq torus-load-on-startup t)

  ;; Set it to t if you want autosave of torus on Emacs exit
  (setq torus-save-on-exit t)

  ;; Where to auto load & save torus ...
  (setq torus-autoread-file "~/.emacs.d/torus/last.el")
  (setq torus-autowrite-file torus-autoread-file)

  ;; ... or auto load & save list of toruses
  ;; (setq torus-autoread-file "~/.emacs.d/torus/last.meta.el")
  ;; (setq torus-autowrite-file torus-autoread-file)

  (setq torus-history-maximum-elements 30)

  (setq torus-maximum-horizontal-split 3)
  (setq torus-maximum-vertical-split 3)

  (torus-init)

  (torus-install-default-bindings)

#+end_src


* Warning

Despite abundant testing, some bugs might remain, so be careful.
